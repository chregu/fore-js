"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("axios"),t=require("uuid");function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var r=s(e);const n={GROUNDEDNESS:"GROUNDEDNESS",SIMILARITY:"SIMILARITY"};exports.Foresight=class{constructor({apiToken:e,apiUrl:t="https://foresight-userservice-dev.azurewebsites.net",uiUrl:s="https://icy-sand.foreai.co",maxEntriesBeforeAutoFlush:r=10,logLevel:n="info"}){this.apiToken=e,this.apiUrl=t,this.uiUrl=s,this.maxEntriesBeforeAutoFlush=r,this.timeoutSeconds=60,this.logEntries=[],this.logging=console,this.logging.info("Foresight client initialized")}async _makeRequest({method:e,endpoint:t,params:s=null,inputJson:n=null}){try{const i=await r.default({method:e,url:`${this.apiUrl}${t}`,headers:{Authorization:`Bearer ${this.apiToken}`},params:s,data:n,timeout:1e3*this.timeoutSeconds});return 200!==i.status&&this.logging.error(i.data),i.data}catch(e){const t=e.message;throw this.logging.error("Api Error:",t),new Error(t)}}async createSimpleEvalset({evalsetId:e,queries:s,referenceAnswers:r=null}){if(null==e||null==s)throw new Error("evalsetId and queries are required.");if(r&&s.length!==r.length)throw new Error("Number of queries and references must match.");const n={evalset_id:e,evalset_entries:s.map(((e,s)=>({query:e,reference_answer:r?r[s]:null,entry_id:t.v4()})))};try{return await this._makeRequest({method:"post",endpoint:"/api/eval/set",inputJson:n})}catch(e){throw e}}async getEvalset({evalsetId:e}){try{return await this._makeRequest({method:"get",endpoint:"/api/eval/set",params:{evalset_id:e}})}catch(e){throw e}}async getEvalrunQueries({experimentId:e}){try{return await this._makeRequest({method:"get",endpoint:"/api/eval/run/queries",params:{experiment_id:e}})}catch(e){throw e}}async createEvalrun({runConfig:e}){try{const t=await this._makeRequest({method:"post",endpoint:"/api/eval/run",inputJson:{evalset_id:e.evalsetId,experiment_id:e.experimentId,metrics:e.metrics}});return 200===t.status&&this.logging.info(`Eval run with experiment_id ${e.experimentId} created.`),t}catch(e){throw e}}async generateAnswersAndRunEval({generateFn:e,runConfig:t}){try{await this.createEvalrun({runConfig:t});const s=t.experimentId,r=await this.getEvalrunQueries({experimentId:s}),n={};for(const[t,s]of Object.entries(r)){const r=e(s);n[t]=r}const i={experiment_id:s,entry_id_to_inference_output:n},o=await this._makeRequest({method:"put",endpoint:"/api/eval/run/entries",inputJson:i});return 200===o.status&&this.logging.info("Eval run successful. Visit %s to view results.",this.uiUrl),o}catch(e){throw e}}async flush(){if(0===this.logEntries.length)return void this.logging.info("No log entries to flush.");const e={log_entries:this.logEntries};try{const t=await this._makeRequest({method:"put",endpoint:"/api/eval/log",inputJson:e});return 200===t.status&&this.logging.log("Log entries flushed successfully. Visit %s to view results.",this.uiUrl),this.logEntries=[],t}catch(e){throw e}}log({query:e,response:t,contexts:s}){const r={query:e,inference_output:{generated_response:t,contexts:s}};this.logEntries.push(r),this.logEntries.length>=this.maxEntriesBeforeAutoFlush&&this.flush()}async _convertEvalRunDetailsToDataFrame(e){const t={query:[],reference_answer:[],generated_answer:[],source_docids:[],contexts:[]},s=[n.GROUNDEDNESS,n.SIMILARITY];for(const e of s)t[e.toLowerCase()]=[];for(const r of e.entries){t.query.push(r.input.query),t.reference_answer.push(r.input.reference_answer),t.generated_answer.push(r.output.generated_response),t.source_docids.push(r.output.source_docids),t.contexts.push(r.output.contexts);for(const e of s)e in r.metric_values?t[e.toLowerCase()].push(r.metric_values[e]):t[e.toLowerCase()].push(null)}return null}async getEvalrunDetails({experimentId:e,sortBy:t="input.query",limit:s=100,convertToDataframe:r=!0}){const n={experiment_id:e};null!==s&&null!==t&&(n.sort_field_name=t,n.limit=s.toString());try{const e=await this._makeRequest({method:"get",endpoint:"/api/eval/run/details",params:n});return r?await this._convertEvalRunDetailsToDataFrame(e):e}catch(e){throw e}}},exports.MetricType=n;
